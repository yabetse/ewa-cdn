<<<<<<< HEAD
function searchTransactions(queryString){$(".transaction-item").each((function(){$(this).text().search(new RegExp(queryString,"i"))<0?$(this).hide():$(this).show()}))}function resetSearchBar(){let searchInputCont=$("#transaction-search-bar .search-input-cont"),clearInput=$("#transaction-search-bar #clear");$(clearInput).hasClass("hidden")||$(clearInput).addClass("hidden"),$(searchInputCont).removeClass("search-offset"),searchTransactions("")}function getStatusClass(status){switch(status){case"Paid Out":return"status-payed";case"In Progress":return"status-pending";default:return"status-rejected"}}function setStatusIcon(status){switch(status){case"Paid Out":return'<span class="material-icons status-icon status-payed">done</span>';case"In Progress":return'<span class="material-icons status-icon status-pending">hourglass_bottom</span>';default:return'<span class="material-icons status-icon status-error">do_not_disturb_on</span>'}}function parseTransactions(){let transactions=[];return $(".kn-list-content .kn-list-item-container").each((function(){let transaction={};$(this).find(".kn-detail").each((function(){let label=$(this).find(".kn-detail-label span span").text(),detailKey=label.split(" ").join(""),detailVal=$(this).find(".kn-detail-body span span").text();"BankAccount"===detailKey&&(detailVal=$(this).find(".kn-detail-body span span span").text()),transaction[detailKey]={label:label,value:detailVal}})),transactions.push(transaction)})),transactions}function formatDate(stringDate){let dateArray=StringDate.split("/"),date=new Date(+dateArray[2],dateArray[1]-1,+dateArray[0]),year=date.getFullYear(),month,day;return`${date.toLocaleString("default",{month:"long"})} ${date.getDate()<10?"0"+date.getDate():date.getDate()}, ${year}`}function createDetailRows(transaction){let detailRows="";for(const detail in transaction){if("PWATotalAmount"===detail)continue;let value=transaction[detail].value,row;if("RequestDate"===detail){let formattedDate=formatDate(value.substring(0,10)),time=value.substring(10,value.length);value=formattedDate.concat(" at",time)}if("WithdrawalSpeed"===detail){let speed=value.split("-");value=`\n                <span class='withdrawal-speed'>\n                    <span class='ws-title'>${speed[0]}</span>\n                    <span class='ws-desc'>${speed[1]}<span>\n                </span>\n            `}detailRows+=`\n            <div class="ti-content-row">\n                <span class="ti-row-label">\n                    ${transaction[detail].label}\n                </span>\n\n                <span class="ti-row-value ${"Status"===detail&&getStatusClass(value)}">\n                    ${value||"-"}\n                </span>\n            </div>\n        `}return detailRows}function createTransactionList(){let transactions=parseTransactions(),transactionsCont=$(".transaction-list-container");transactions.forEach(transaction=>{let formattedDate=formatDate(transaction.RequestDate.value.substring(0,10)),transactionTemplate=`\n            <div class="transaction-item ${getStatusClass(transaction.Status.value)}">\n                <div class="ti-header">\n                    <div class="ti-header-tgl">\n                        <span class="ti-withdrawal-date">${formattedDate}</span>\n\n                        <span class="btn-toggle material-icons">\n                            expand_more\n                        </span>\n                    </div>\n\n                    <div class="ti-header-amount">\n                        <span class="ti-amount">${transaction.PWANetAmount.value}</span>\n\n                        ${setStatusIcon(transaction.Status.value)}\n                    </div>\n                </div>\n\n                <div class="ti-contnet hidden-detail">\n                    ${createDetailRows(transaction)}\n                </div>\n            </div>\n        `;transactionsCont.append(transactionTemplate)})}function setupEventHandlers(){$(".transaction-item .btn-toggle").click((function(){let ti=$(this).parents(".transaction-item");$(this).toggleClass("selected"),$(ti).find(".ti-contnet").toggleClass("hidden-detail"),$("html, body").animate({scrollTop:$(ti).offset().top+$(ti).height()/3},1e3)})),$("#transaction-search-bar input").keyup((function(){let searchBar=$(this).parents(".custom-search-bar"),searchInputCont=$(searchBar).find(".search-input-cont"),clearInput=$(searchBar).find("#clear"),searchString=$(this).val().trim();""!==searchString?($(clearInput).removeClass("hidden"),$(searchInputCont).hasClass("search-offset")||$(searchInputCont).addClass("search-offset"),searchTransactions(searchString)):resetSearchBar()})),$("#transaction-search-bar #clear").click((function(){let searchBar=$(this).parents(".custom-search-bar"),input=$(searchBar).find("input.form-input");$(input).val(""),resetSearchBar()}))}function loadCustomTrasactionView(){createTransactionList(),setupEventHandlers()}
=======
function searchTransactions(t){$(".transaction-item").each(function(){$(this).text().search(new RegExp(t,"i"))<0?$(this).hide():$(this).show()})}function resetSearchBar(){let t=$("#transaction-search-bar .search-input-cont"),a=$("#transaction-search-bar #clear");$(a).hasClass("hidden")||$(a).addClass("hidden"),$(t).removeClass("search-offset"),searchTransactions("")}function getStatusClass(t){switch(t){case"Paid Out":return"status-payed";case"In Progress":return"status-pending";default:return"status-rejected"}}function setStatusIcon(t){switch(t){case"Paid Out":return'<span class="material-icons status-icon status-payed">done</span>';case"In Progress":return'<span class="material-icons status-icon status-pending">hourglass_bottom</span>';default:return'<span class="material-icons status-icon status-error">do_not_disturb_on</span>'}}function parseTransactions(){let t=[];return $(".kn-list-content .kn-list-item-container").each(function(){let a={};$(this).find(".kn-detail").each(function(){let t=$(this).find(".kn-detail-label span span").text(),n=t.split(" ").join(""),s=$(this).find(".kn-detail-body span span").text();"BankAccount"===n&&(s=$(this).find(".kn-detail-body span span span").text()),a[n]={label:t,value:s}}),t.push(a)}),t}function formatDate(t){let a=new Date(t),n=a.getFullYear();return`${a.toLocaleString("default",{month:"long"})} ${a.getDate()<10?"0"+a.getDate():a.getDate()}, ${n}`}function createDetailRows(t){let a="";for(const n in t){if("PWATotalAmount"===n)continue;let s=t[n].value;if("RequestDate"===n){let t=formatDate(s.substring(0,10)),a=s.substring(10,s.length);s=t.concat(" at",a)}if("WithdrawalSpeed"===n){let t=s.split("-");s=`\n                <span class='withdrawal-speed'>\n                    <span class='ws-title'>${t[0]}</span>\n                    <span class='ws-desc'>${t[1]}<span>\n                </span>\n            `}a+=`\n            <div class="ti-content-row">\n                <span class="ti-row-label">\n                    ${t[n].label}\n                </span>\n\n                <span class="ti-row-value ${"Status"===n&&getStatusClass(s)}">\n                    ${s||"-"}\n                </span>\n            </div>\n        `}return a}function createTransactionList(){let t=parseTransactions();console.log("Parsed Transactions",t);let a=$(".transaction-list-container");t.forEach(t=>{let n=formatDate(t.RequestDate.value.substring(0,10)),s=`\n            <div class="transaction-item ${getStatusClass(t.Status.value)}">\n                <div class="ti-header">\n                    <div class="ti-header-tgl">\n                        <span class="ti-withdrawal-date">${n}</span>\n\n                        <span class="btn-toggle material-icons">\n                            expand_more\n                        </span>\n                    </div>\n\n                    <div class="ti-header-amount">\n                        <span class="ti-amount">${t.PWANetAmount.value}</span>\n\n                        ${setStatusIcon(t.Status.value)}\n                    </div>\n                </div>\n\n                <div class="ti-contnet hidden-detail">\n                    ${createDetailRows(t)}\n                </div>\n            </div>\n        `;a.append(s)}),console.log("Rendered Transactions",a)}function setupEventHandlers(){$(".transaction-item .btn-toggle").click(function(){let t=$(this).parents(".transaction-item");$(this).toggleClass("selected"),$(t).find(".ti-contnet").toggleClass("hidden-detail"),$("html, body").animate({scrollTop:$(t).offset().top+$(t).height()/3},1e3)}),$("#transaction-search-bar input").keyup(function(){let t=$(this).parents(".custom-search-bar"),a=$(t).find(".search-input-cont"),n=$(t).find("#clear"),s=$(this).val().trim();""!==s?($(n).removeClass("hidden"),$(a).hasClass("search-offset")||$(a).addClass("search-offset"),searchTransactions(s)):resetSearchBar()}),$("#transaction-search-bar #clear").click(function(){let t=$(this).parents(".custom-search-bar"),a=$(t).find("input.form-input");$(a).val(""),resetSearchBar()})}function loadCustomTrasactionView(){console.log("Loading Transactions"),createTransactionList(),setupEventHandlers()}
>>>>>>> 1ae5ccd9e1af628855b8d6590ef18082bf060237
